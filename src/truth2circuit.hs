{-
 - Copyright (C) 2011 by Knut Franke (knut dot franke at gmx dot de)
 -
 - This program is free software; you can redistribute it and/or modify
 - it under the terms of the GNU General Public License as published by
 - the Free Software Foundation; either version 2 of the License, or
 - (at your option) any later version.
 -
 - This program is distributed in the hope that it will be useful,
 - but WITHOUT ANY WARRANTY; without even the implied warranty of
 - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 - GNU General Public License for more details.
 -
 - You should have received a copy of the GNU General Public License
 - along with this program; if not, write to the Free Software
 - Foundation, Inc., 51 Franklin Street, Fifth Floor,
 - Boston, MA  02110-1301  USA
 -}
module Main where

import BooleanAlgebra
import TruthTables
import qualified AsciiArtDrawing as AA

handleInput :: String -> IO ()
handleInput input = do
	let exprs    = map (simplify.sumOfProducts.exprFromTable) (parseMultiTruthTable input)
	let (evars, bindings) = createBindings (map toTernary exprs)
	let circuit  = AA.drawCircuit bindings
	putStrLn $ replicate 80 '='
	putStrLn "The truth table is generated by the following expressions:"
	putStrLn $ replicate 80 '-'
	putStr $ unlines $ map (\(v,e) -> show v ++ " = " ++ show e) (zip evars exprs)
	putStrLn ""
	putStrLn $ replicate 80 '='
	putStrLn "Subdivided into variable bindings implementable by logic gates:"
	putStrLn $ replicate 80 '-'
	putStr $ showBindings bindings
	putStrLn ""
	putStrLn $ "============"
	let (numAnd2, numAnd3, numOr2, numOr3, numNot) = foldl countGates (0,0,0,0,0) bindings where
		countGates (a2,a3,o2,o3,n) (And [_,_])   = (a2+1,a3,o2,o3,n)
		countGates (a2,a3,o2,o3,n) (And [_,_,_]) = (a2,a3+1,o2,o3,n)
		countGates (a2,a3,o2,o3,n) (Or [_,_])    = (a2,a3,o2+1,o3,n)
		countGates (a2,a3,o2,o3,n) (Or [_,_,_])  = (a2,a3,o2,o3+1,n)
		countGates (a2,a3,o2,o3,n) (Not _)       = (a2,a3,o2,o3,n+1)
		countGates (a2,a3,o2,o3,n) _             = (a2,a3,o2,o3,n)
	putStrLn $ "type  number"
	putStrLn $ "------------"
	putStrLn $ "2xAND " ++ show numAnd2
	putStrLn $ "3xAND " ++ show numAnd3
	putStrLn $ "2xOR  " ++ show numOr2
	putStrLn $ "3xOR  " ++ show numOr3
	putStrLn $ "NOT   " ++ show numNot
	putStrLn $ "------------"
	putStrLn $ "total " ++ show (numAnd2 + numAnd3 + numOr2 + numOr3 + numNot)
	putStrLn ""
	putStrLn $ replicate 80 '='
	putStrLn "The corresponding circuit looks like this:"
	putStrLn $ replicate 80 '-'
	putStr circuit

main = getContents >>= handleInput
